#!/bin/sh

#########################
# Functions declaration #
#########################
notif_system_corruption () {
	local time_on_screen=30
	local reason=""

	if [[ "$#" -ge "1" ]]; then
		time_on_screen=$1
	fi
	if [[ "$#" -ge "2" ]]; then
		reason=$2
	fi

  	notif_set $time_on_screen "^YOUR SYSTEM IS CORRUPTED:^$reason^^PLEASE REFLASH YOUR SD CARD"
}

exit_with_reason () {
	local reason=$EXIT_CODE_FAILURE
	
	# Check args
	if [[ "$#" -ge "1" ]]; then
		reason=$1
	fi

	echo "EXIT FAILURE $EXIT_CODE_FAILURE, check log file"

	# Remove extraction folder
	if [[ -d $EXTRACT_DIRECTORY ]]; then
		echo "Removing extraction directory: $EXTRACT_DIRECTORY" >> $LOG_FILE_UPGRADE
		rm -rf $EXTRACT_DIRECTORY
	fi

	# Copy log file to UPGRADE_ARCHIVES_DIRECTORY
	cp "$LOG_FILE_UPGRADE" "$LOG_FILE_UPGRADE_COPY"

  	exit $reason
}

exit_failure () {
  	exit_with_reason $EXIT_CODE_FAILURE
}

get_targz_uncompressed_size () { 
	# check arg
	if [[ "$#" != "1" ]]; then
		extracted_size=0
		return 1
	fi

	extracted_size=$(tar tzvf "$1" | sed 's/ \+/ /g' | cut -f3 -d' ' | sed '2,$s/^/+ /' | paste -sd' ' | bc)
  	return 0
}

################
# Exit reasons #
################
EXIT_CODE_SUCCESS=0
EXIT_CODE_FAILURE=1
EXIT_CODE_FAILURE_NO_VERSION=2
EXIT_CODE_FAILURE_WRONG_VERSION=3
EXIT_CODE_FAILURE_WRONG_TAR_GZ=4
EXIT_CODE_FAILURE_WRONG_MD5=5
EXIT_CODE_FAILURE_WRONG_EXTRACT_SIZE=6
EXIT_CODE_FAILURE_NO_SPACE=7
EXIT_CODE_FAILURE_EXTRACT_FAILED=8
EXIT_CODE_FAILURE_SCRIPT_NOT_FOUND=9

#####################
# Files declaration #
#####################
FUNKEY_VERSION_FILE="/etc/funkey_version"
UPGRADE_ARCHIVES_DIRECTORY="/mnt/"
EXTRACT_DIRECTORY=$UPGRADE_ARCHIVES_DIRECTORY/update_tmp
LOG_FILES_DIRECTORY="/usr/local/etc/upgrade_logs/"
LOG_FILE_UPGRADE="$LOG_FILES_DIRECTORY/upgrade_log_$(date +%m-%d-%y_%T).txt"
LOG_FILE_UPGRADE_COPY="$UPGRADE_ARCHIVES_DIRECTORY/upgrade_log.txt"

####################
# Vars declaration #
####################
upgrade_needed=0
upgrade_error=0
extracted_size=0

###################
# Process Upgrade #
###################
# Init log files
mkdir -p $LOG_FILES_DIRECTORY
echo -e "******* Upgrade Incremental FunKey, $(date) *******\n" > $LOG_FILE_UPGRADE
test -f $LOG_FILE_UPGRADE_COPY && rm $LOG_FILE_UPGRADE_COPY

# Get current FunKey version
if [[ -f $FUNKEY_VERSION_FILE ]]; then	
	FUNKEY_VERSION=$(cat $FUNKEY_VERSION_FILE)

	# Check if positive number (float or integer)
	if [[ "$FUNKEY_VERSION" != ^[+-]?[0-9]*$ ]];then
		echo "Current FunKey version = $FUNKEY_VERSION" >> $LOG_FILE_UPGRADE
	elif [[ "$FUNKEY_VERSION" != ^[+-]?[0-9]+\.?[0-9]*$ ]];then
		echo "Current FunKey version = $FUNKEY_VERSION" >> $LOG_FILE_UPGRADE
	else
		echo "WRONG FUNKEY VERSION FOUND: $FUNKEY_VERSION !" >> $LOG_FILE_UPGRADE

		# Notif
		notif_system_corruption 20 "WRONG VERSION: $FUNKEY_VERSION"
		
		# Exit failure
		upgrade_error=1	
		exit_with_reason $EXIT_CODE_FAILURE_NO_VERSION
	fi

else
	echo "NO FUNKEY VERSION FOUND !" >> $LOG_FILE_UPGRADE

	# Notif
	notif_system_corruption 20 "NO VERSION"
	
	# Exit failure
	upgrade_error=1
	exit_with_reason $EXIT_CODE_FAILURE_WRONG_VERSION
fi

# Check if upgrade file is present
upgrade_archive=$(ls -v $UPGRADE_ARCHIVES_DIRECTORY/upgrade_funkey_${FUNKEY_VERSION}_to_*.tar.gz 2> /dev/null | head -1)
other_upgrade_archives=$(ls $UPGRADE_ARCHIVES_DIRECTORY/upgrade_funkey_*.tar.gz 2> /dev/null)
if [[ ! -z "$upgrade_archive" ]]; then
    echo -e "Upgrade archive found:\n	$upgrade_archive" >> $LOG_FILE_UPGRADE
    #echo -e "Upgrade archive found:\n	$upgrade_archive"
    upgrade_needed=1
elif [[ ! -z "$other_upgrade_archives" ]]; then
    echo -e "Other upgrades files found:\n	$other_upgrade_archives" >> $LOG_FILE_UPGRADE
else
    echo "No upgrade files found" >> $LOG_FILE_UPGRADE
fi

if [[ "$upgrade_needed" == "1" ]]; then
	
	# Check if tar.gz file is valid
	tar_gz_file_list=$(tar -tzf "$upgrade_archive" 2>/dev/null)
	tar_gz_validity=$?
	if [[ "$tar_gz_validity" != "0" ]]; then 
		echo "WRONG TAR.GZ FILE" >> $LOG_FILE_UPGRADE
		exit_with_reason $EXIT_CODE_FAILURE_WRONG_TAR_GZ
	else
		echo -e "\nList of files in archive:"  >> $LOG_FILE_UPGRADE
		echo $tar_gz_file_list  >> $LOG_FILE_UPGRADE
		echo -e "\n" >> $LOG_FILE_UPGRADE
	fi

	# Check if archive integrity is ok
	file_no_ext=${upgrade_archive%.tar.gz}
	md5_read=${file_no_ext##*_}
	echo "MD5 read from file: $md5_read" >> $LOG_FILE_UPGRADE
	md5_computed=$(md5sum $upgrade_archive | cut -d' ' -f1)
	echo "MD5 computed from file: $md5_computed" >> $LOG_FILE_UPGRADE

	if [[ "$md5_read" != "$md5_computed" ]]; then
		echo "WRONG MD5" >> $LOG_FILE_UPGRADE
		exit_with_reason $EXIT_CODE_FAILURE_WRONG_MD5
	fi

	# Get size of uncompressed data
	get_targz_uncompressed_size "$upgrade_archive"
	if [[ $extracted_size == "0" ]]; then
		echo "CANNOT COMPUTE EXTRACTED SIZE" >> $LOG_FILE_UPGRADE
		exit_with_reason $EXIT_CODE_FAILURE_WRONG_EXTRACT_SIZE
	fi
	echo "Extracted archive size: $extracted_size" >> $LOG_FILE_UPGRADE
	
	# Check if enough space in /mnt for extraction
	free_space=$(($(stat -f --format="%a*%S" $UPGRADE_ARCHIVES_DIRECTORY)))
	echo "Free space in $UPGRADE_ARCHIVES_DIRECTORY: $free_space" >> $LOG_FILE_UPGRADE
	if [[ "$free_space" -le "$extracted_size" ]]; then
		missing_space=$(echo "$extracted_size - $free_space" | bc )
		format_missing_space=$(numfmt --to=iec --suffix=B $missing_space)
		echo "NOT ENOUGH FREE SPACE FOR EXTRACTION, MISSING $format_missing_space" >> $LOG_FILE_UPGRADE
		echo "NOT ENOUGH FREE SPACE FOR EXTRACTION, MISSING $format_missing_space"

		notif_set 20 "^NOT ENOUGH SPACE FOR UPDATE^PLEASE FREE $format_missing_space"

		exit_with_reason $EXIT_CODE_FAILURE_NO_SPACE
	fi

	# Remove and create extraction folder
	if [[ -d $EXTRACT_DIRECTORY ]]; then
		echo "Removing extraction directory: $EXTRACT_DIRECTORY" >> $LOG_FILE_UPGRADE
		rm -rf $EXTRACT_DIRECTORY
	fi
	mkdir $EXTRACT_DIRECTORY

	# Notif before achive extraction
	notif_set 0 "^^^^^^^    UPGRADE IN PROGRESS... ^      EXTRACTING FILES^^DO NOT TURN OFF THE CONSOLE! ^^^^^^"

	# Extract archive
	echo "Extracting to directory: $EXTRACT_DIRECTORY" >> $LOG_FILE_UPGRADE
	tar xzf $upgrade_archive -C $EXTRACT_DIRECTORY 2> /dev/null
	if [[ "$?" != "0" ]]; then
		echo "EXTRACTION FAILED" >> $LOG_FILE_UPGRADE
		exit_with_reason EXIT_CODE_FAILURE_EXTRACT_FAILED
	fi

	echo "Extracted directory content:" >> $LOG_FILE_UPGRADE
	ls $EXTRACT_DIRECTORY >> $LOG_FILE_UPGRADE

	# Check for update script
	upgrade_script=$(ls $EXTRACT_DIRECTORY/launch_upgrade.sh 2> /dev/null | head -1)
	if [[ -z "$upgrade_script" ]]; then
	    echo -e "UPGRADE SCRIPT NOT FOUND" >> $LOG_FILE_UPGRADE
	    echo -e "UPGRADE SCRIPT NOT FOUND"

	    notif_set 20 "^UPDATE FAILED:^SCRIPT NOT FOUND^^WRONG UPGRADE FILE"
	    exit_with_reason EXIT_CODE_FAILURE_SCRIPT_NOT_FOUND
	fi

	# Display notif before launching script
	notif_set 0 "^^^^^^^    UPGRADE IN PROGRESS... ^$(basename "$upgrade_archive")^^DO NOT TURN OFF THE CONSOLE! ^^^^^^"

	# Launch upgrade script
	echo -e "Launching upgrade script" >> $LOG_FILE_UPGRADE
	chmod 777 $upgrade_script
	$upgrade_script "$LOG_FILE_UPGRADE"
	if [[ "$?" != "0" ]]; then
		echo -e "UPGRADE SCRIPT FAILURE" >> $LOG_FILE_UPGRADE
		exit_failure
	fi
	echo -e "Upgrade script successfull" >> $LOG_FILE_UPGRADE

	# Remove upgrade archive
	echo -e "Remove upgrade archive" >> $LOG_FILE_UPGRADE
	rm $upgrade_archive

	# Remove and create extraction folder
	if [[ -d $EXTRACT_DIRECTORY ]]; then
		echo "Removing extraction directory: $EXTRACT_DIRECTORY" >> $LOG_FILE_UPGRADE
		rm -rf $EXTRACT_DIRECTORY
	fi

	# Notif upgrade successfull
	notif_set 0 "^^^^^^^^      UPGRADE SUCCESSFUL^        REBOOTING NOW^^^^^^^"
	sleep 2
	notif_clear

	# Reboot FunKey
	reboot
fi

# If no upgrade, remove log file
if [[ "$upgrade_needed" == "0" && "$upgrade_error" == "0" ]]; then
	rm $LOG_FILE_UPGRADE
fi

# Exit success
exit $EXIT_CODE_SUCCESS
